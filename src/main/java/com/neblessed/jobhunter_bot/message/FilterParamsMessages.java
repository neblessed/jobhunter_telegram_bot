package com.neblessed.jobhunter_bot.message;

import com.neblessed.jobhunter_bot.keyboad.InlineKeyboards;
import com.neblessed.jobhunter_bot.repository.FiltersRepository;
import com.neblessed.jobhunter_bot.service.implementation.FiltersServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

@Component
public class FilterParamsMessages {
    @Autowired
    InlineKeyboards inlineKeyboards;

    @Autowired
    FiltersRepository filtersRepository;

    @Autowired
    FiltersServiceImpl filtersService;


    public SendMessage addYourFilter(long chatId) {
        if (filtersRepository.findAll().stream().anyMatch(x -> x.getTelegram_id() == chatId)) {
            SendMessage message = SendMessage
                    .builder()
                    .chatId(chatId)
                    .text("–£ –í–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä ‚ùå")
                    .build();
            return message;
        } else {
            SendMessage message = SendMessage
                    .builder()
                    .chatId(chatId)
                    .text("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É –ø–æ–∑–∏—Ü–∏—é: ")
                    .replyMarkup(inlineKeyboards.jobPosition())
                    .build();
            return message;
        }
    }

    public SendMessage addYourGrade(long chatId) {
        SendMessage message = SendMessage
                .builder()
                .chatId(chatId)
                .text("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥—Ä–µ–π–¥: ")
                .replyMarkup(inlineKeyboards.jobGrade())
                .build();
        return message;
    }

    public SendMessage prefferedJobType(long chatId) {
        SendMessage message = SendMessage
                .builder()
                .chatId(chatId)
                .text("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ")
                .replyMarkup(inlineKeyboards.prefferedJobType())
                .build();
        return message;
    }

    public SendMessage prefferedLocation(long chatId) {
        SendMessage message = SendMessage
                .builder()
                .chatId(chatId)
                .text("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏: ")
                .replyMarkup(inlineKeyboards.prefferedLocation())
                .build();
        return message;
    }

    public SendMessage prefferedSalary(long chatId) {
        SendMessage message = SendMessage
                .builder()
                .chatId(chatId)
                .text("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –ó–ü: ")
                .replyMarkup(inlineKeyboards.prefferedSalary())
                .build();
        return message;
    }

    public SendMessage programmingLanguage(long chatId) {
        SendMessage message = SendMessage
                .builder()
                .chatId(chatId)
                .text("–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: ")
                .replyMarkup(inlineKeyboards.programmingLanguage())
                .build();
        return message;
    }

    public SendMessage filterCreated(long chatId) {
        SendMessage message = SendMessage
                .builder()
                .chatId(chatId)
                .text("–í–∞—à —Ñ–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω üëåüèº")
                .build();
        return message;
    }

    public SendMessage removeFilter(long chatId) {
        if (filtersRepository.findAll().stream().anyMatch(x -> x.getTelegram_id() == chatId)) {
            filtersService.deleteFilter((int) chatId);
            SendMessage message = SendMessage
                    .builder()
                    .chatId(chatId)
                    .text("–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
                    .build();
            return message;
        } else {
            SendMessage message = SendMessage
                    .builder()
                    .chatId(chatId)
                    .text("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å. –§–∏–ª—å—Ç—Ä –Ω–µ –±—ã–ª —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω ‚ùå")
                    .build();
            return message;
        }
    }
}
